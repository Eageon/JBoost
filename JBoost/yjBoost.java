/**
   This class provides static methods for evaluating a jboost-trained
   classifier on new data.  This part of the code can stand by itself.

   In addition, this class includes a main which, when run, reads data
   from standard input of the same form as that used during training,
   and outputs corresponding predictions to standard output.  This
   part of the code requires other jboost classes.

   This classifier was automatically generated by jboost on
   Mon Mar 19 20:05:39 CST 2012.
**/

import java.util.*;

public class predict{

  /**
     Evaluates this classifier on an example represented by an array
     of Objects and returns an array of scores, one for each class.
     Finite attributes must be represented by an Integer specifying
     the index of the chosen value.  Text attributes are given by a
     String.  Number attributes are represented by a Double.  In all
     cases, an undefined attribute is indicated by a null pointer.
     @param at an array of Objects corresponding to the attributes
                   specified in the spec file on which this classifier
		   was trained.  Specifically, these objects are:
<pre>
  *      index    attr.type    data.type   name
  *    ------------------------------------------
  *         0     number       Double       word_freq_make
  *         1     number       Double       word_freq_address
  *         2     number       Double       word_freq_all
  *         3     number       Double       word_freq_3d
  *         4     number       Double       word_freq_our
  *         5     number       Double       word_freq_over
  *         6     number       Double       word_freq_remove
  *         7     number       Double       word_freq_internet
  *         8     number       Double       word_freq_order
  *         9     number       Double       word_freq_mail
  *        10     number       Double       word_freq_receive
  *        11     number       Double       word_freq_will
  *        12     number       Double       word_freq_people
  *        13     number       Double       word_freq_report
  *        14     number       Double       word_freq_addresses
  *        15     number       Double       word_freq_free
  *        16     number       Double       word_freq_business
  *        17     number       Double       word_freq_email
  *        18     number       Double       word_freq_you
  *        19     number       Double       word_freq_credit
  *        20     number       Double       word_freq_your
  *        21     number       Double       word_freq_font
  *        22     number       Double       word_freq_000
  *        23     number       Double       word_freq_money
  *        24     number       Double       word_freq_hp
  *        25     number       Double       word_freq_hpl
  *        26     number       Double       word_freq_george
  *        27     number       Double       word_freq_650
  *        28     number       Double       word_freq_lab
  *        29     number       Double       word_freq_labs
  *        30     number       Double       word_freq_telnet
  *        31     number       Double       word_freq_857
  *        32     number       Double       word_freq_data
  *        33     number       Double       word_freq_415
  *        34     number       Double       word_freq_85
  *        35     number       Double       word_freq_technology
  *        36     number       Double       word_freq_1999
  *        37     number       Double       word_freq_parts
  *        38     number       Double       word_freq_pm
  *        39     number       Double       word_freq_direct
  *        40     number       Double       word_freq_cs
  *        41     number       Double       word_freq_meeting
  *        42     number       Double       word_freq_original
  *        43     number       Double       word_freq_project
  *        44     number       Double       word_freq_re
  *        45     number       Double       word_freq_edu
  *        46     number       Double       word_freq_table
  *        47     number       Double       word_freq_conference
  *        48     number       Double       char_freq_semi
  *        49     number       Double       char_freq_paren
  *        50     number       Double       char_freq_bracket
  *        51     number       Double       char_freq_bang
  *        52     number       Double       char_freq_dollar
  *        53     number       Double       char_freq_hash
  *        54     number       Double       capital_run_length_average
  *        55     number       Double       capital_run_length_longest
  *        56     number       Double       capital_run_length_total
</pre>
     @return an array of scores correpsonding to the classes:
<pre>
  *           index       class name
  *          ------------------------
  *              0        +1
  *              1        -1
</pre>
  **/
  static public double[] predict(Object[] at) {
    attr = at;
    int i,j,a,n;
    StringTokenizer st;
    String s;
    Object v;
    Enumeration e;
    for (i = 0; i < num_text_attr; i++) {
      a = text_attr[i];
      if (!defined_attr(a))
        continue;
      Arrays.fill(tokens[a], false);
      try {
        s = (String) attr[a];
      }
      catch (ClassCastException ex) {
        throw new IllegalArgumentException
          ("Expected attribute " + a + " to be of type String");
      }
      st = new StringTokenizer(s);
      n = st.countTokens();
      String[] words = new String[n];
      for (j = 0; j < n; j++)
        words[j] = st.nextToken();
      for (j = 0; j < text_patterns[i].length; j++) {
        setPattern(words, text_patterns[i][j]);
        while(moreTokens())
          if ((v = hash.get(nextToken())) != null)
            tokens[a][((Integer) v).intValue()] = true;
      }
    }
    return predict_int();
  }

  /**
     Evaluates this classifier on an example represented by an array
     of Strings and returns an array of scores, one for each class.
     These Strings represent the values of the attributes similar
     to their representation in a data file.  Null pointers can be
     passed for undefined attributes.

     @param at an array of Objects corresponding to the attributes
                   specified in the spec file on which this classifier
		   was trained.  Specifically, these objects are:
<pre>
  *      index    attr.type    name
  *    ------------------------------------------
  *         0     number       word_freq_make
  *         1     number       word_freq_address
  *         2     number       word_freq_all
  *         3     number       word_freq_3d
  *         4     number       word_freq_our
  *         5     number       word_freq_over
  *         6     number       word_freq_remove
  *         7     number       word_freq_internet
  *         8     number       word_freq_order
  *         9     number       word_freq_mail
  *        10     number       word_freq_receive
  *        11     number       word_freq_will
  *        12     number       word_freq_people
  *        13     number       word_freq_report
  *        14     number       word_freq_addresses
  *        15     number       word_freq_free
  *        16     number       word_freq_business
  *        17     number       word_freq_email
  *        18     number       word_freq_you
  *        19     number       word_freq_credit
  *        20     number       word_freq_your
  *        21     number       word_freq_font
  *        22     number       word_freq_000
  *        23     number       word_freq_money
  *        24     number       word_freq_hp
  *        25     number       word_freq_hpl
  *        26     number       word_freq_george
  *        27     number       word_freq_650
  *        28     number       word_freq_lab
  *        29     number       word_freq_labs
  *        30     number       word_freq_telnet
  *        31     number       word_freq_857
  *        32     number       word_freq_data
  *        33     number       word_freq_415
  *        34     number       word_freq_85
  *        35     number       word_freq_technology
  *        36     number       word_freq_1999
  *        37     number       word_freq_parts
  *        38     number       word_freq_pm
  *        39     number       word_freq_direct
  *        40     number       word_freq_cs
  *        41     number       word_freq_meeting
  *        42     number       word_freq_original
  *        43     number       word_freq_project
  *        44     number       word_freq_re
  *        45     number       word_freq_edu
  *        46     number       word_freq_table
  *        47     number       word_freq_conference
  *        48     number       char_freq_semi
  *        49     number       char_freq_paren
  *        50     number       char_freq_bracket
  *        51     number       char_freq_bang
  *        52     number       char_freq_dollar
  *        53     number       char_freq_hash
  *        54     number       capital_run_length_average
  *        55     number       capital_run_length_longest
  *        56     number       capital_run_length_total
</pre>
     @return an array of scores correpsonding to the classes:
<pre>
  *           index       class name
  *          ------------------------
  *              0        +1
  *              1        -1
</pre>
  **/
  static public double[] predict(String[] as) {
    int j, a;
    Object v;
    Object[] attr = new Object[as.length];

    for (j = 0; j < real_attr.length; j++) {
      a = real_attr[j];
      try{ 
        attr[a] = (as[a] == null || as[a].trim().equals("")
                   ? null
                   : (new Double(as[a])));
      }
      catch (NumberFormatException e) {
        throw new IllegalArgumentException
             ("Expected attribute " + a + " to contain a String parsable as a double");
      }
    }
    for (j = 0; j < text_attr.length; j++) {
      a = text_attr[j];
      attr[a] = as[a];
    }
    for (j = 0; j < disc_attr.length; j++) {
      String s = null;
      a = disc_attr[j];
      if (as[a] == null || (s = as[a].trim()).equals(""))
        attr[a] = null;
      else if ((v = disc_val_map[j].get(s)) == null) {
        throw new IllegalArgumentException
             ("Illegal value for attribute " + a + ":" + s);
      } else
        attr[a] = ((Integer) v);
    }

    return predict(attr);
  }

  static private double[] predict_int() {
    reset_pred();
    add_pred(   /* R */
               0.2279298102299376);
    if (defined_attr(51)) {  /* R.0 */
      if (double_attr(51) <= 0.0785) {
        add_pred(   /* R.0:0 */
                   0.638109949122525);
        if (defined_attr(26)) {  /* R.0:0.0 */
          if (double_attr(26) <= 0.0050) {
            add_pred(   /* R.0:0.0:0 */
                       -0.12718939476414323);
          } else {
            add_pred(   /* R.0:0.0:1 */
                       2.5542865876823897);
          }
        }
        if (defined_attr(25)) {  /* R.0:0.1 */
          if (double_attr(25) <= 0.12) {
            add_pred(   /* R.0:0.1:0 */
                       -0.04320076299937377);
          } else {
            add_pred(   /* R.0:0.1:1 */
                       1.195834392616679);
          }
        }
        if (defined_attr(11)) {  /* R.0:0.2 */
          if (double_attr(11) <= 2.09) {
            add_pred(   /* R.0:0.2:0 */
                       0.09047551473541447);
          } else {
            add_pred(   /* R.0:0.2:1 */
                       -0.9783080930113986);
          }
        }
      } else {
        add_pred(   /* R.0:1 */
                   -0.6921431150862234);
        if (defined_attr(51)) {  /* R.0:1.0 */
          if (double_attr(51) <= 0.8665) {
            add_pred(   /* R.0:1.0:0 */
                       0.3991238648063803);
            if (defined_attr(7)) {  /* R.0:1.0:0.0 */
              if (double_attr(7) <= 0.555) {
                add_pred(   /* R.0:1.0:0.0:0 */
                           0.13750659795245274);
                if (defined_attr(7)) {  /* R.0:1.0:0.0:0.0 */
                  if (double_attr(7) <= 0.46499999999999997) {
                    add_pred(   /* R.0:1.0:0.0:0.0:0 */
                               0.02006811685673354);
                  } else {
                    add_pred(   /* R.0:1.0:0.0:0.0:1 */
                               1.7283709578806312);
                  }
                }
                if (defined_attr(54)) {  /* R.0:1.0:0.0:0.1 */
                  if (double_attr(54) <= 2.292) {
                    add_pred(   /* R.0:1.0:0.0:0.1:0 */
                               0.3769121096704494);
                  } else {
                    add_pred(   /* R.0:1.0:0.0:0.1:1 */
                               -0.2815704554302351);
                  }
                }
              } else {
                add_pred(   /* R.0:1.0:0.0:1 */
                           -1.7360646941883031);
              }
            }
            if (defined_attr(20)) {  /* R.0:1.0:0.1 */
              if (double_attr(20) <= 0.895) {
                add_pred(   /* R.0:1.0:0.1:0 */
                           0.2731984314270501);
                if (defined_attr(9)) {  /* R.0:1.0:0.1:0.0 */
                  if (double_attr(9) <= 0.165) {
                    add_pred(   /* R.0:1.0:0.1:0.0:0 */
                               0.2287634144283278);
                    if (defined_attr(18)) {  /* R.0:1.0:0.1:0.0:0.0 */
                      if (double_attr(18) <= 1.725) {
                        add_pred(   /* R.0:1.0:0.1:0.0:0.0:0 */
                                   -0.3073351142077014);
                      } else {
                        add_pred(   /* R.0:1.0:0.1:0.0:0.0:1 */
                                   0.5761871205481093);
                        if (defined_attr(18)) {  /* R.0:1.0:0.1:0.0:0.0:1.0 */
                          if (double_attr(18) <= 3.105) {
                            add_pred(   /* R.0:1.0:0.1:0.0:0.0:1.0:0 */
                                       1.15466753228499);
                          } else {
                            add_pred(   /* R.0:1.0:0.1:0.0:0.0:1.0:1 */
                                       -0.45867268138839296);
                          }
                        }
                      }
                    }
                  } else {
                    add_pred(   /* R.0:1.0:0.1:0.0:1 */
                               -1.0800882527425142);
                  }
                }
              } else {
                add_pred(   /* R.0:1.0:0.1:1 */
                           -0.35235678265152803);
                if (defined_attr(56)) {  /* R.0:1.0:0.1:1.0 */
                  if (double_attr(56) <= 41.5) {
                    add_pred(   /* R.0:1.0:0.1:1.0:0 */
                               0.8564374488069044);
                  } else {
                    add_pred(   /* R.0:1.0:0.1:1.0:1 */
                               -0.4019101670352655);
                    if (defined_attr(22)) {  /* R.0:1.0:0.1:1.0:1.0 */
                      if (double_attr(22) <= 0.175) {
                        add_pred(   /* R.0:1.0:0.1:1.0:1.0:0 */
                                   -0.334961132288504);
                      } else {
                        add_pred(   /* R.0:1.0:0.1:1.0:1.0:1 */
                                   1.0753014220309358);
                      }
                    }
                  }
                }
              }
            }
          } else {
            add_pred(   /* R.0:1.0:1 */
                       -0.446745208559594);
            if (defined_attr(9)) {  /* R.0:1.0:1.0 */
              if (double_attr(9) <= 0.665) {
                add_pred(   /* R.0:1.0:1.0:0 */
                           -0.6087832112436655);
                if (defined_attr(54)) {  /* R.0:1.0:1.0:0.0 */
                  if (double_attr(54) <= 1.4060000000000001) {
                    add_pred(   /* R.0:1.0:1.0:0.0:0 */
                               0.8203743204161638);
                    if (defined_attr(56)) {  /* R.0:1.0:1.0:0.0:0.0 */
                      if (double_attr(56) <= 2.5) {
                        add_pred(   /* R.0:1.0:1.0:0.0:0.0:0 */
                                   -2.297560242675803);
                      } else {
                        add_pred(   /* R.0:1.0:1.0:0.0:0.0:1 */
                                   0.5935518968355185);
                      }
                    }
                  } else {
                    add_pred(   /* R.0:1.0:1.0:0.0:1 */
                               -0.999900701703976);
                  }
                }
              } else {
                add_pred(   /* R.0:1.0:1.0:1 */
                           0.7995620739555858);
              }
            }
          }
        }
        if (defined_attr(8)) {  /* R.0:1.1 */
          if (double_attr(8) <= 0.745) {
            add_pred(   /* R.0:1.1:0 */
                       0.20604687020488657);
          } else {
            add_pred(   /* R.0:1.1:1 */
                       -2.3138890605727656);
          }
        }
      }
    }
    if (defined_attr(6)) {  /* R.1 */
      if (double_attr(6) <= 0.01) {
        add_pred(   /* R.1:0 */
                   0.2596893350510752);
        if (defined_attr(24)) {  /* R.1:0.0 */
          if (double_attr(24) <= 0.12) {
            add_pred(   /* R.1:0.0:0 */
                       -0.1824859290693248);
            if (defined_attr(55)) {  /* R.1:0.0:0.0 */
              if (double_attr(55) <= 9.5) {
                add_pred(   /* R.1:0.0:0.0:0 */
                           0.650314251446431);
                if (defined_attr(18)) {  /* R.1:0.0:0.0:0.0 */
                  if (double_attr(18) <= 1.915) {
                    add_pred(   /* R.1:0.0:0.0:0.0:0 */
                               0.3626448002472613);
                    if (defined_attr(54)) {  /* R.1:0.0:0.0:0.0:0.0 */
                      if (double_attr(54) <= 1.4775) {
                        add_pred(   /* R.1:0.0:0.0:0.0:0.0:0 */
                                   -0.38047298964725335);
                        if (defined_attr(11)) {  /* R.1:0.0:0.0:0.0:0.0:0.0 */
                          if (double_attr(11) <= 0.59) {
                            add_pred(   /* R.1:0.0:0.0:0.0:0.0:0.0:0 */
                                       -0.051079758792213735);
                            if (defined_attr(56)) {  /* R.1:0.0:0.0:0.0:0.0:0.0:0.0 */
                              if (double_attr(56) <= 5.5) {
                                add_pred(   /* R.1:0.0:0.0:0.0:0.0:0.0:0.0:0 */
                                           1.3439420012434045);
                                if (defined_attr(51)) {  /* R.1:0.0:0.0:0.0:0.0:0.0:0.0:0.0 */
                                  if (double_attr(51) <= 3.8035) {
                                    add_pred(   /* R.1:0.0:0.0:0.0:0.0:0.0:0.0:0.0:0 */
                                               1.9996326322774056);
                                  } else {
                                    add_pred(   /* R.1:0.0:0.0:0.0:0.0:0.0:0.0:0.0:1 */
                                               -1.898502632288497);
                                  }
                                }
                              } else {
                                add_pred(   /* R.1:0.0:0.0:0.0:0.0:0.0:0.0:1 */
                                           -0.28443133405072657);
                              }
                            }
                          } else {
                            add_pred(   /* R.1:0.0:0.0:0.0:0.0:0.0:1 */
                                       2.4054092270941294);
                          }
                        }
                      } else {
                        add_pred(   /* R.1:0.0:0.0:0.0:0.0:1 */
                                   0.8969288515733932);
                        if (defined_attr(15)) {  /* R.1:0.0:0.0:0.0:0.0:1.0 */
                          if (double_attr(15) <= 0.14) {
                            add_pred(   /* R.1:0.0:0.0:0.0:0.0:1.0:0 */
                                       1.0464833282962616);
                            if (defined_attr(54)) {  /* R.1:0.0:0.0:0.0:0.0:1.0:0.0 */
                              if (double_attr(54) <= 3.7915) {
                                add_pred(   /* R.1:0.0:0.0:0.0:0.0:1.0:0.0:0 */
                                           2.3640407509750716);
                              } else {
                                add_pred(   /* R.1:0.0:0.0:0.0:0.0:1.0:0.0:1 */
                                           -0.720950896277365);
                              }
                            }
                          } else {
                            add_pred(   /* R.1:0.0:0.0:0.0:0.0:1.0:1 */
                                       -0.8592398915902519);
                          }
                        }
                      }
                    }
                    if (defined_attr(56)) {  /* R.1:0.0:0.0:0.0:0.1 */
                      if (double_attr(56) <= 18.5) {
                        add_pred(   /* R.1:0.0:0.0:0.0:0.1:0 */
                                   0.4765504893694142);
                      } else {
                        add_pred(   /* R.1:0.0:0.0:0.0:0.1:1 */
                                   -0.38707983303520754);
                        if (defined_attr(44)) {  /* R.1:0.0:0.0:0.0:0.1:1.0 */
                          if (double_attr(44) <= 0.04) {
                            add_pred(   /* R.1:0.0:0.0:0.0:0.1:1.0:0 */
                                       -0.35236029710281397);
                          } else {
                            add_pred(   /* R.1:0.0:0.0:0.0:0.1:1.0:1 */
                                       2.5354101849539386);
                          }
                        }
                      }
                    }
                  } else {
                    add_pred(   /* R.1:0.0:0.0:0.0:1 */
                               -0.22141540123491726);
                    if (defined_attr(49)) {  /* R.1:0.0:0.0:0.0:1.0 */
                      if (double_attr(49) <= 0.1865) {
                        add_pred(   /* R.1:0.0:0.0:0.0:1.0:0 */
                                   -0.1567005340938676);
                        if (defined_attr(18)) {  /* R.1:0.0:0.0:0.0:1.0:0.0 */
                          if (double_attr(18) <= 1.97) {
                            add_pred(   /* R.1:0.0:0.0:0.0:1.0:0.0:0 */
                                       -1.4186732234033455);
                          } else {
                            add_pred(   /* R.1:0.0:0.0:0.0:1.0:0.0:1 */
                                       0.12946942093515165);
                          }
                        }
                      } else {
                        add_pred(   /* R.1:0.0:0.0:0.0:1.0:1 */
                                   1.8070541583025976);
                      }
                    }
                  }
                }
                if (defined_attr(5)) {  /* R.1:0.0:0.0:0.1 */
                  if (double_attr(5) <= 0.165) {
                    add_pred(   /* R.1:0.0:0.0:0.1:0 */
                               -0.04038813276740411);
                  } else {
                    add_pred(   /* R.1:0.0:0.0:0.1:1 */
                               1.7624338116149687);
                  }
                }
              } else {
                add_pred(   /* R.1:0.0:0.0:1 */
                           -0.37794712925536966);
                if (defined_attr(36)) {  /* R.1:0.0:0.0:1.0 */
                  if (double_attr(36) <= 0.155) {
                    add_pred(   /* R.1:0.0:0.0:1.0:0 */
                               -0.319968268624635);
                    if (defined_attr(54)) {  /* R.1:0.0:0.0:1.0:0.0 */
                      if (double_attr(54) <= 1.9355) {
                        add_pred(   /* R.1:0.0:0.0:1.0:0.0:0 */
                                   0.758229343165233);
                        if (defined_attr(42)) {  /* R.1:0.0:0.0:1.0:0.0:0.0 */
                          if (double_attr(42) <= 0.03) {
                            add_pred(   /* R.1:0.0:0.0:1.0:0.0:0.0:0 */
                                       0.40510797247408553);
                          } else {
                            add_pred(   /* R.1:0.0:0.0:1.0:0.0:0.0:1 */
                                       -1.9246635284933735);
                          }
                        }
                      } else {
                        add_pred(   /* R.1:0.0:0.0:1.0:0.0:1 */
                                   -0.16513319230305792);
                        if (defined_attr(18)) {  /* R.1:0.0:0.0:1.0:0.0:1.0 */
                          if (double_attr(18) <= 6.039999999999999) {
                            add_pred(   /* R.1:0.0:0.0:1.0:0.0:1.0:0 */
                                       0.09738871284967826);
                          } else {
                            add_pred(   /* R.1:0.0:0.0:1.0:0.0:1.0:1 */
                                       -2.1750961499223602);
                          }
                        }
                      }
                    }
                    if (defined_attr(52)) {  /* R.1:0.0:0.0:1.0:0.1 */
                      if (double_attr(52) <= 0.013000000000000001) {
                        add_pred(   /* R.1:0.0:0.0:1.0:0.1:0 */
                                   0.2038710187734347);
                      } else {
                        add_pred(   /* R.1:0.0:0.0:1.0:0.1:1 */
                                   -0.46353537014146745);
                      }
                    }
                  } else {
                    add_pred(   /* R.1:0.0:0.0:1.0:1 */
                               0.9158270298536499);
                  }
                }
                if (defined_attr(22)) {  /* R.1:0.0:0.0:1.1 */
                  if (double_attr(22) <= 0.485) {
                    add_pred(   /* R.1:0.0:0.0:1.1:0 */
                               0.07089149507910353);
                  } else {
                    add_pred(   /* R.1:0.0:0.0:1.1:1 */
                               -2.49716134423075);
                  }
                }
                if (defined_attr(11)) {  /* R.1:0.0:0.0:1.2 */
                  if (double_attr(11) <= 1.9249999999999998) {
                    add_pred(   /* R.1:0.0:0.0:1.2:0 */
                               -0.08176661589609413);
                  } else {
                    add_pred(   /* R.1:0.0:0.0:1.2:1 */
                               1.0133515027912412);
                    if (defined_attr(18)) {  /* R.1:0.0:0.0:1.2:1.0 */
                      if (double_attr(18) <= 2.335) {
                        add_pred(   /* R.1:0.0:0.0:1.2:1.0:0 */
                                   1.9488443928193033);
                      } else {
                        add_pred(   /* R.1:0.0:0.0:1.2:1.0:1 */
                                   -0.6463502732100044);
                      }
                    }
                  }
                }
                if (defined_attr(5)) {  /* R.1:0.0:0.0:1.3 */
                  if (double_attr(5) <= 0.235) {
                    add_pred(   /* R.1:0.0:0.0:1.3:0 */
                               0.10092347527904473);
                  } else {
                    add_pred(   /* R.1:0.0:0.0:1.3:1 */
                               -0.8384834081776503);
                    if (defined_attr(42)) {  /* R.1:0.0:0.0:1.3:1.0 */
                      if (double_attr(42) <= 0.25) {
                        add_pred(   /* R.1:0.0:0.0:1.3:1.0:0 */
                                   -0.7179543608247978);
                      } else {
                        add_pred(   /* R.1:0.0:0.0:1.3:1.0:1 */
                                   2.3506473106996335);
                      }
                    }
                  }
                }
              }
            }
            if (defined_attr(16)) {  /* R.1:0.0:0.1 */
              if (double_attr(16) <= 0.095) {
                add_pred(   /* R.1:0.0:0.1:0 */
                           0.07651383094496837);
                if (defined_attr(54)) {  /* R.1:0.0:0.1:0.0 */
                  if (double_attr(54) <= 3.4835000000000003) {
                    add_pred(   /* R.1:0.0:0.1:0.0:0 */
                               0.17220583704808362);
                  } else {
                    add_pred(   /* R.1:0.0:0.1:0.0:1 */
                               -0.3831884308414989);
                    if (defined_attr(51)) {  /* R.1:0.0:0.1:0.0:1.0 */
                      if (double_attr(51) <= 0.6675) {
                        add_pred(   /* R.1:0.0:0.1:0.0:1.0:0 */
                                   0.03976788062761522);
                      } else {
                        add_pred(   /* R.1:0.0:0.1:0.0:1.0:1 */
                                   -2.1294992076320822);
                      }
                    }
                    if (defined_attr(44)) {  /* R.1:0.0:0.1:0.0:1.1 */
                      if (double_attr(44) <= 0.865) {
                        add_pred(   /* R.1:0.0:0.1:0.0:1.1:0 */
                                   -0.1005430633186593);
                      } else {
                        add_pred(   /* R.1:0.0:0.1:0.0:1.1:1 */
                                   -2.363403366882297);
                      }
                    }
                  }
                }
              } else {
                add_pred(   /* R.1:0.0:0.1:1 */
                           -0.7035209749842959);
              }
            }
          } else {
            add_pred(   /* R.1:0.0:1 */
                       1.0952082453519383);
            if (defined_attr(10)) {  /* R.1:0.0:1.0 */
              if (double_attr(10) <= 0.94) {
                add_pred(   /* R.1:0.0:1.0:0 */
                           0.16748387354117275);
                if (defined_attr(11)) {  /* R.1:0.0:1.0:0.0 */
                  if (double_attr(11) <= 0.10500000000000001) {
                    add_pred(   /* R.1:0.0:1.0:0.0:0 */
                               -0.6251218457017379);
                    if (defined_attr(15)) {  /* R.1:0.0:1.0:0.0:0.0 */
                      if (double_attr(15) <= 0.015) {
                        add_pred(   /* R.1:0.0:1.0:0.0:0.0:0 */
                                   0.4925704886612749);
                        if (defined_attr(32)) {  /* R.1:0.0:1.0:0.0:0.0:0.0 */
                          if (double_attr(32) <= 1.02) {
                            add_pred(   /* R.1:0.0:1.0:0.0:0.0:0.0:0 */
                                       2.027683560444748);
                          } else {
                            add_pred(   /* R.1:0.0:1.0:0.0:0.0:0.0:1 */
                                       -1.4404363975708323);
                          }
                        }
                      } else {
                        add_pred(   /* R.1:0.0:1.0:0.0:0.0:1 */
                                   -1.6977499906603697);
                      }
                    }
                  } else {
                    add_pred(   /* R.1:0.0:1.0:0.0:1 */
                               0.869255288569001);
                    if (defined_attr(48)) {  /* R.1:0.0:1.0:0.0:1.0 */
                      if (double_attr(48) <= 0.0715) {
                        add_pred(   /* R.1:0.0:1.0:0.0:1.0:0 */
                                   1.988871150743556);
                      } else {
                        add_pred(   /* R.1:0.0:1.0:0.0:1.0:1 */
                                   -0.4925809789959755);
                      }
                    }
                  }
                }
              } else {
                add_pred(   /* R.1:0.0:1.0:1 */
                           -2.5142450938489413);
              }
            }
            if (defined_attr(29)) {  /* R.1:0.0:1.1 */
              if (double_attr(29) <= 0.025) {
                add_pred(   /* R.1:0.0:1.1:0 */
                           -0.1754011586248014);
              } else {
                add_pred(   /* R.1:0.0:1.1:1 */
                           2.3975489251550703);
              }
            }
          }
        }
        if (defined_attr(41)) {  /* R.1:0.1 */
          if (double_attr(41) <= 0.455) {
            add_pred(   /* R.1:0.1:0 */
                       -0.07375891128821287);
            if (defined_attr(4)) {  /* R.1:0.1:0.0 */
              if (double_attr(4) <= 0.095) {
                add_pred(   /* R.1:0.1:0.0:0 */
                           0.2083470537391964);
                if (defined_attr(55)) {  /* R.1:0.1:0.0:0.0 */
                  if (double_attr(55) <= 46.5) {
                    add_pred(   /* R.1:0.1:0.0:0.0:0 */
                               -0.002479084315754684);
                  } else {
                    add_pred(   /* R.1:0.1:0.0:0.0:1 */
                               0.7169691357474665);
                    if (defined_attr(13)) {  /* R.1:0.1:0.0:0.0:1.0 */
                      if (double_attr(13) <= 0.7949999999999999) {
                        add_pred(   /* R.1:0.1:0.0:0.0:1.0:0 */
                                   0.6703173138082369);
                      } else {
                        add_pred(   /* R.1:0.1:0.0:0.0:1.0:1 */
                                   -1.9617691747762789);
                      }
                    }
                  }
                }
              } else {
                add_pred(   /* R.1:0.1:0.0:1 */
                           -0.49170630741860094);
                if (defined_attr(17)) {  /* R.1:0.1:0.0:1.0 */
                  if (double_attr(17) <= 0.435) {
                    add_pred(   /* R.1:0.1:0.0:1.0:0 */
                               0.05495579184983785);
                    if (defined_attr(15)) {  /* R.1:0.1:0.0:1.0:0.0 */
                      if (double_attr(15) <= 0.235) {
                        add_pred(   /* R.1:0.1:0.0:1.0:0.0:0 */
                                   0.19546933447861753);
                      } else {
                        add_pred(   /* R.1:0.1:0.0:1.0:0.0:1 */
                                   -0.871803181097489);
                      }
                    }
                  } else {
                    add_pred(   /* R.1:0.1:0.0:1.0:1 */
                               -1.102402027976989);
                    if (defined_attr(17)) {  /* R.1:0.1:0.0:1.0:1.0 */
                      if (double_attr(17) <= 1.14) {
                        add_pred(   /* R.1:0.1:0.0:1.0:1.0:0 */
                                   -1.3524043158527201);
                      } else {
                        add_pred(   /* R.1:0.1:0.0:1.0:1.0:1 */
                                   0.957816672409687);
                      }
                    }
                  }
                }
              }
            }
          } else {
            add_pred(   /* R.1:0.1:1 */
                       2.891129212121895);
          }
        }
        if (defined_attr(24)) {  /* R.1:0.2 */
          if (double_attr(24) <= 2.065) {
            add_pred(   /* R.1:0.2:0 */
                       -0.02473171972751506);
            if (defined_attr(43)) {  /* R.1:0.2:0.0 */
              if (double_attr(43) <= 0.035) {
                add_pred(   /* R.1:0.2:0.0:0 */
                           -0.06988699532624541);
                if (defined_attr(19)) {  /* R.1:0.2:0.0:0.0 */
                  if (double_attr(19) <= 0.725) {
                    add_pred(   /* R.1:0.2:0.0:0.0:0 */
                               0.042090205363169535);
                  } else {
                    add_pred(   /* R.1:0.2:0.0:0.0:1 */
                               -2.491304896895637);
                  }
                }
              } else {
                add_pred(   /* R.1:0.2:0.0:1 */
                           1.2531229702103839);
              }
            }
          } else {
            add_pred(   /* R.1:0.2:1 */
                       2.605278006141917);
          }
        }
      } else {
        add_pred(   /* R.1:1 */
                   -1.5319957375187236);
        if (defined_attr(20)) {  /* R.1:1.0 */
          if (double_attr(20) <= 0.46499999999999997) {
            add_pred(   /* R.1:1.0:0 */
                       0.45882238456832625);
            if (defined_attr(7)) {  /* R.1:1.0:0.0 */
              if (double_attr(7) <= 0.96) {
                add_pred(   /* R.1:1.0:0.0:0 */
                           -0.3045902815112866);
                if (defined_attr(55)) {  /* R.1:1.0:0.0:0.0 */
                  if (double_attr(55) <= 7.0) {
                    add_pred(   /* R.1:1.0:0.0:0.0:0 */
                               1.5085779254752623);
                  } else {
                    add_pred(   /* R.1:1.0:0.0:0.0:1 */
                               -0.5719058283506544);
                  }
                }
              } else {
                add_pred(   /* R.1:1.0:0.0:1 */
                           2.2945815512963903);
              }
            }
          } else {
            add_pred(   /* R.1:1.0:1 */
                       -0.5605088709134939);
            if (defined_attr(20)) {  /* R.1:1.0:1.0 */
              if (double_attr(20) <= 3.36) {
                add_pred(   /* R.1:1.0:1.0:0 */
                           -0.47929060656831235);
              } else {
                add_pred(   /* R.1:1.0:1.0:1 */
                           1.5620867611077849);
              }
            }
          }
        }
        if (defined_attr(12)) {  /* R.1:1.1 */
          if (double_attr(12) <= 0.255) {
            add_pred(   /* R.1:1.1:0 */
                       -0.16113703588118913);
          } else {
            add_pred(   /* R.1:1.1:1 */
                       -2.362998853454286);
          }
        }
      }
    }
    if (defined_attr(52)) {  /* R.2 */
      if (double_attr(52) <= 0.1035) {
        add_pred(   /* R.2:0 */
                   0.2247157914956868);
        if (defined_attr(15)) {  /* R.2:0.0 */
          if (double_attr(15) <= 0.415) {
            add_pred(   /* R.2:0.0:0 */
                       0.08840525424025716);
            if (defined_attr(44)) {  /* R.2:0.0:0.0 */
              if (double_attr(44) <= 0.805) {
                add_pred(   /* R.2:0.0:0.0:0 */
                           -0.07611798946037451);
                if (defined_attr(47)) {  /* R.2:0.0:0.0:0.0 */
                  if (double_attr(47) <= 0.27) {
                    add_pred(   /* R.2:0.0:0.0:0.0:0 */
                               -0.012463588501227467);
                  } else {
                    add_pred(   /* R.2:0.0:0.0:0.0:1 */
                               2.3729539648874036);
                  }
                }
              } else {
                add_pred(   /* R.2:0.0:0.0:1 */
                           1.4153905475016844);
                if (defined_attr(19)) {  /* R.2:0.0:0.0:1.0 */
                  if (double_attr(19) <= 0.225) {
                    add_pred(   /* R.2:0.0:0.0:1.0:0 */
                               0.6430508433310332);
                    if (defined_attr(16)) {  /* R.2:0.0:0.0:1.0:0.0 */
                      if (double_attr(16) <= 0.515) {
                        add_pred(   /* R.2:0.0:0.0:1.0:0.0:0 */
                                   1.7165255350307436);
                      } else {
                        add_pred(   /* R.2:0.0:0.0:1.0:0.0:1 */
                                   -1.2293214242967803);
                      }
                    }
                  } else {
                    add_pred(   /* R.2:0.0:0.0:1.0:1 */
                               -2.1323030897401343);
                  }
                }
              }
            }
          } else {
            add_pred(   /* R.2:0.0:1 */
                       -0.6187969575719631);
            if (defined_attr(54)) {  /* R.2:0.0:1.0 */
              if (double_attr(54) <= 1.7965) {
                add_pred(   /* R.2:0.0:1.0:0 */
                           -0.9112471882667126);
              } else {
                add_pred(   /* R.2:0.0:1.0:1 */
                           0.22898650179423238);
                if (defined_attr(17)) {  /* R.2:0.0:1.0:1.0 */
                  if (double_attr(17) <= 1.6549999999999998) {
                    add_pred(   /* R.2:0.0:1.0:1.0:0 */
                               -0.044676731891435666);
                  } else {
                    add_pred(   /* R.2:0.0:1.0:1.0:1 */
                               1.7693418208891067);
                  }
                }
                if (defined_attr(56)) {  /* R.2:0.0:1.0:1.1 */
                  if (double_attr(56) <= 38.0) {
                    add_pred(   /* R.2:0.0:1.0:1.1:0 */
                               -2.2492749915916583);
                  } else {
                    add_pred(   /* R.2:0.0:1.0:1.1:1 */
                               0.2382659985524544);
                  }
                }
              }
            }
            if (defined_attr(9)) {  /* R.2:0.0:1.1 */
              if (double_attr(9) <= 1.06) {
                add_pred(   /* R.2:0.0:1.1:0 */
                           -0.22014715553082245);
                if (defined_attr(6)) {  /* R.2:0.0:1.1:0.0 */
                  if (double_attr(6) <= 0.03) {
                    add_pred(   /* R.2:0.0:1.1:0.0:0 */
                               0.14861537838406003);
                  } else {
                    add_pred(   /* R.2:0.0:1.1:0.0:1 */
                               -2.4166170421325908);
                  }
                }
              } else {
                add_pred(   /* R.2:0.0:1.1:1 */
                           1.1864518098251529);
              }
            }
          }
        }
        if (defined_attr(48)) {  /* R.2:0.1 */
          if (double_attr(48) <= 0.464) {
            add_pred(   /* R.2:0.1:0 */
                       -0.057082028286136566);
            if (defined_attr(21)) {  /* R.2:0.1:0.0 */
              if (double_attr(21) <= 0.135) {
                add_pred(   /* R.2:0.1:0.0:0 */
                           -0.030315673607414922);
              } else {
                add_pred(   /* R.2:0.1:0.0:1 */
                           -2.2969327587942225);
              }
            }
            if (defined_attr(36)) {  /* R.2:0.1:0.1 */
              if (double_attr(36) <= 0.155) {
                add_pred(   /* R.2:0.1:0.1:0 */
                           -0.10502640437350072);
                if (defined_attr(3)) {  /* R.2:0.1:0.1:0.0 */
                  if (double_attr(3) <= 0.365) {
                    add_pred(   /* R.2:0.1:0.1:0.0:0 */
                               -0.006215429389537978);
                  } else {
                    add_pred(   /* R.2:0.1:0.1:0.0:1 */
                               -2.366915064145462);
                  }
                }
              } else {
                add_pred(   /* R.2:0.1:0.1:1 */
                           0.693790227487584);
              }
            }
          } else {
            add_pred(   /* R.2:0.1:1 */
                       2.4221248493995775);
          }
        }
      } else {
        add_pred(   /* R.2:1 */
                   -1.1253547454397437);
        if (defined_attr(56)) {  /* R.2:1.0 */
          if (double_attr(56) <= 205.0) {
            add_pred(   /* R.2:1.0:0 */
                       0.4031625324318607);
            if (defined_attr(18)) {  /* R.2:1.0:0.0 */
              if (double_attr(18) <= 4.375) {
                add_pred(   /* R.2:1.0:0.0:0 */
                           0.2996184280156841);
              } else {
                add_pred(   /* R.2:1.0:0.0:1 */
                           -2.2303931141183937);
              }
            }
          } else {
            add_pred(   /* R.2:1.0:1 */
                       -1.2388338294837038);
          }
        }
      }
    }
    if (defined_attr(26)) {  /* R.3 */
      if (double_attr(26) <= 0.20500000000000002) {
        add_pred(   /* R.3:0 */
                   -0.12867236787515568);
        if (defined_attr(45)) {  /* R.3:0.0 */
          if (double_attr(45) <= 0.08499999999999999) {
            add_pred(   /* R.3:0.0:0 */
                       -0.1356172545899705);
            if (defined_attr(28)) {  /* R.3:0.0:0.0 */
              if (double_attr(28) <= 0.07) {
                add_pred(   /* R.3:0.0:0.0:0 */
                           -0.05130492037592239);
              } else {
                add_pred(   /* R.3:0.0:0.0:1 */
                           2.4997488464068782);
              }
            }
            if (defined_attr(23)) {  /* R.3:0.0:0.1 */
              if (double_attr(23) <= 1.045) {
                add_pred(   /* R.3:0.0:0.1:0 */
                           0.0110606178295198);
                if (defined_attr(56)) {  /* R.3:0.0:0.1:0.0 */
                  if (double_attr(56) <= 896.5) {
                    add_pred(   /* R.3:0.0:0.1:0.0:0 */
                               0.012659096266160895);
                  } else {
                    add_pred(   /* R.3:0.0:0.1:0.0:1 */
                               -1.0504754684734277);
                    if (defined_attr(34)) {  /* R.3:0.0:0.1:0.0:1.0 */
                      if (double_attr(34) <= 0.07500000000000001) {
                        add_pred(   /* R.3:0.0:0.1:0.0:1.0:0 */
                                   -1.0950794452127872);
                      } else {
                        add_pred(   /* R.3:0.0:0.1:0.0:1.0:1 */
                                   1.8115026207159148);
                      }
                    }
                  }
                }
                if (defined_attr(4)) {  /* R.3:0.0:0.1:0.1 */
                  if (double_attr(4) <= 1.065) {
                    add_pred(   /* R.3:0.0:0.1:0.1:0 */
                               0.03388970740525111);
                  } else {
                    add_pred(   /* R.3:0.0:0.1:0.1:1 */
                               -0.6811540851841823);
                  }
                }
                if (defined_attr(22)) {  /* R.3:0.0:0.1:0.2 */
                  if (double_attr(22) <= 0.245) {
                    add_pred(   /* R.3:0.0:0.1:0.2:0 */
                               0.019515125882344938);
                  } else {
                    add_pred(   /* R.3:0.0:0.1:0.2:1 */
                               -1.0904562117971728);
                    if (defined_attr(8)) {  /* R.3:0.0:0.1:0.2:1.0 */
                      if (double_attr(8) <= 0.475) {
                        add_pred(   /* R.3:0.0:0.1:0.2:1.0:0 */
                                   -1.3749727660447102);
                      } else {
                        add_pred(   /* R.3:0.0:0.1:0.2:1.0:1 */
                                   1.3500706205341997);
                      }
                    }
                  }
                }
              } else {
                add_pred(   /* R.3:0.0:0.1:1 */
                           -1.8162624555651379);
              }
            }
          } else {
            add_pred(   /* R.3:0.0:1 */
                       1.0192628791621654);
            if (defined_attr(27)) {  /* R.3:0.0:1.0 */
              if (double_attr(27) <= 0.22999999999999998) {
                add_pred(   /* R.3:0.0:1.0:0 */
                           0.4300075533514173);
                if (defined_attr(11)) {  /* R.3:0.0:1.0:0.0 */
                  if (double_attr(11) <= 2.2800000000000002) {
                    add_pred(   /* R.3:0.0:1.0:0.0:0 */
                               0.45789540114384236);
                    if (defined_attr(18)) {  /* R.3:0.0:1.0:0.0:0.0 */
                      if (double_attr(18) <= 0.0050) {
                        add_pred(   /* R.3:0.0:1.0:0.0:0.0:0 */
                                   -0.6443983745258496);
                      } else {
                        add_pred(   /* R.3:0.0:1.0:0.0:0.0:1 */
                                   1.1792295869562015);
                      }
                    }
                    if (defined_attr(49)) {  /* R.3:0.0:1.0:0.0:0.1 */
                      if (double_attr(49) <= 0.356) {
                        add_pred(   /* R.3:0.0:1.0:0.0:0.1:0 */
                                   0.9009718459685476);
                      } else {
                        add_pred(   /* R.3:0.0:1.0:0.0:0.1:1 */
                                   -1.0495919406572607);
                      }
                    }
                  } else {
                    add_pred(   /* R.3:0.0:1.0:0.0:1 */
                               -2.309123814682225);
                  }
                }
              } else {
                add_pred(   /* R.3:0.0:1.0:1 */
                           -1.7943880548046893);
                if (defined_attr(54)) {  /* R.3:0.0:1.0:1.0 */
                  if (double_attr(54) <= 2.8095) {
                    add_pred(   /* R.3:0.0:1.0:1.0:0 */
                               -1.8381895819346192);
                  } else {
                    add_pred(   /* R.3:0.0:1.0:1.0:1 */
                               1.652206421296063);
                  }
                }
              }
            }
          }
        }
      } else {
        add_pred(   /* R.3:1 */
                   2.531462546142542);
      }
    }
    if (defined_attr(26)) {  /* R.4 */
      if (double_attr(26) <= 0.0050) {
        add_pred(   /* R.4:0 */
                   -0.02206661652849869);
      } else {
        add_pred(   /* R.4:1 */
                   1.5751017369924174);
      }
    }

    return finalize_pred();
  }
  static private String[] keys = {
  };
  static private final int num_keys = 0;
  static private boolean[][] tokens = new boolean[1][];
  static private int text_attr[] = {  };
  static private final int num_text_attr = 0;
  static private boolean[][][] text_patterns = {
  };
  static private int real_attr[] = {3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,34,36,41,42,43,44,45,47,48,49,51,52,54,55,56,  };
  static private int disc_attr[] = {  };
  static private Object[] attr;
  static private Map hash = null;
  static private Map[] disc_val_map = null;
  static private String[][] disc_attr_vals = {
  };

  static {
    disc_val_map = new Map[disc_attr.length];
    for (int i = 0; i < disc_attr.length; i++) {
      disc_val_map[i] = new TreeMap();
      for (int j = 0; j < disc_attr_vals[i].length; j++)
        disc_val_map[i].put(disc_attr_vals[i][j], new Integer(j));
    }
  }

  static {
    if (hash == null) {
      hash = new HashMap();
      for (int i = 0; i < num_keys; i++)
        hash.put(keys[i], new Integer(i));
    }
  }

  static{
    for (int i = 0; i < num_text_attr; i++)
      tokens[text_attr[i]] = new boolean[num_keys];
  }

  static private boolean defined_attr(int i) {
    return (attr[i] != null);
  }

  static private double double_attr(int i) {
    double r;
    try {
      r = ((Double) attr[i]).doubleValue();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException
        ("Expected attribute " + i + " to be of type Double");
    }
    return r;
  }

  static private int int_attr(int i) {
    int r;
    try {
      r = ((Integer) attr[i]).intValue();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException
        ("Expected attribute " + i + " to be of type Integer");
    }
    return r;
  }

  static private boolean attr_contains_token(int i, int k) {
    return tokens[i][k];
  }

  static private int cur_word = 0;
  static private String[] words = null;
  static private boolean[] pattern = null;
  static private String prepend = "";
  static private final String[] prependChar = {"0", "1"};

  static private void setPattern(String[] m_w, boolean[] pat) {
    words = m_w;
    pattern = pat;
    cur_word = 0;
    prepend = "";
    for (int i = 0; i < pattern.length; i++)
      prepend += prependChar[pattern[i] ? 1 : 0];
  }

  static private boolean moreTokens() {
    return (cur_word <= words.length - pattern.length);
  }

  static private String nextToken() {
    if (!moreTokens())
      throw new NoSuchElementException();
    String r = prepend;
    for (int i = 0; i < pattern.length; i++) {
      if (pattern[i])
        r += " " + words[cur_word + i];
    }
    cur_word++;
    return r;
  }

  static private double p;
  static private void reset_pred() { p = 0.0; }
  static private void add_pred(double x) { p += x; }
  static private double[] finalize_pred() {
    return new double[] {-p, p};
  }
//------------------------- start cut here to make stand alone -----------
  static private jboost.examples.Example ex;

  /**
     The main reads examples from standard input.  The examples must
     have the same format as used during training.  After each example
     is read a vector of scores is output, one per class.
  **/
  static public void main(String[] argv) {
    jboost.monitor.Monitor.logLevel = -1;

    jboost.tokenizer.ExampleStream exStream = null;

    try {
      exStream =
         new jboost.tokenizer.ExampleStream(
          (new jboost.tokenizer.jboost_DataStream(false, savedSpec)));
    }
    catch (Exception e) {
      System.err.println("Unable to parse spec file.");
      e.printStackTrace();
      return;
    }

    attr = new Object[57];

    jboost.examples.TextDescription.setTokenSet(keys);

    int i, a, j, k;
    double[] r;

    while(true) {
      try {
        ex = exStream.getExample();
      }
      catch(jboost.tokenizer.ParseException e) {
        System.err.println("Bad example encountered:");
        System.err.println(e.getMessage());
        continue;
      }
      if (ex == null)
        break;
      for (j = 0; j < real_attr.length; j++) {
        a = real_attr[j];
        jboost.examples.Attribute at = ex.getAttribute(a);
        attr[a] = (at.isDefined()
            ? (new Double(((jboost.examples.RealAttribute) at).getValue()))
            : null);
      }
      for (j = 0; j < disc_attr.length; j++) {
        a = disc_attr[j];
        jboost.examples.Attribute at = ex.getAttribute(a);
        attr[a] = (at.isDefined()
            ? (new Integer(((jboost.examples.DiscreteAttribute) at).getValue()))
            : null);
      }
      for (j = 0; j < text_attr.length; j++) {
        a = text_attr[j];
        jboost.examples.Attribute at = ex.getAttribute(a);
        if (at.isDefined()) {
          attr[a] = "";
          int[] set = ((jboost.examples.SetAttribute) ex.getAttribute(a)).getList();

          Arrays.fill(tokens[a], false);
          for (k = 0; k < set.length; k++) {
            tokens[a][set[k]] = true;
          }
        } else
          attr[a] = null;
      }

      r = predict_int();
      for(j = 0; j < r.length; j++)
        System.out.print(r[j] + " ");
      System.out.println();
    }
  }

  private static final String savedSpec = "exampleTerminator=;\nattributeTerminator=,\nmaxBadExa=0\nword_freq_make         number\nword_freq_address      number\nword_freq_all          number\nword_freq_3d           number\nword_freq_our          number\nword_freq_over         number\nword_freq_remove       number\nword_freq_internet     number\nword_freq_order        number\nword_freq_mail         number\nword_freq_receive      number\nword_freq_will         number\nword_freq_people       number\nword_freq_report       number\nword_freq_addresses    number\nword_freq_free         number\nword_freq_business     number\nword_freq_email        number\nword_freq_you          number\nword_freq_credit       number\nword_freq_your         number\nword_freq_font         number\nword_freq_000          number\nword_freq_money        number\nword_freq_hp           number\nword_freq_hpl          number\nword_freq_george       number\nword_freq_650          number\nword_freq_lab          number\nword_freq_labs         number\nword_freq_telnet       number\nword_freq_857          number\nword_freq_data         number\nword_freq_415          number\nword_freq_85           number\nword_freq_technology   number\nword_freq_1999         number\nword_freq_parts        number\nword_freq_pm           number\nword_freq_direct       number\nword_freq_cs           number\nword_freq_meeting      number\nword_freq_original     number\nword_freq_project      number\nword_freq_re           number\nword_freq_edu          number\nword_freq_table        number\nword_freq_conference   number\nchar_freq_semi         number\nchar_freq_paren        number\nchar_freq_bracket      number\nchar_freq_bang         number\nchar_freq_dollar       number\nchar_freq_hash         number\ncapital_run_length_average number\ncapital_run_length_longest number\ncapital_run_length_total   number\nlabels (+1,-1)\n";
//--------------------------- end cut ------------------------------------

}

